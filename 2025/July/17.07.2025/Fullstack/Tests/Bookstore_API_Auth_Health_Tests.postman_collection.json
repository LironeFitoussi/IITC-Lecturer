{
    "info": {
      "_postman_id": "bookstore-api-tests",
      "name": "Bookstore API Tests",
      "description": "Comprehensive test suite for the Bookstore API with authentication and health endpoints",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "_exporter_id": "12345678"
    },
    "item": [
      {
        "name": "Health Check",
        "item": [
          {
            "name": "Health Check",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/health",
                "host": ["{{baseUrl}}"],
                "path": ["api", "health"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response has correct message\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.eql(\"Server is running!\");",
                    "});",
                    "pm.test(\"Response time is less than 2000ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});",
                    "pm.test(\"Content-Type is application/json\", function () {",
                    "    pm.response.to.have.header(\"Content-Type\");",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          }
        ],
        "description": "Basic health check endpoint tests"
      },
      {
        "name": "Authentication",
        "item": [
          {
            "name": "Register User",
            "request": {
              "method": "POST",
              "header": [
                { "key": "Content-Type", "value": "application/json" }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"name\": \"{{testName}}\"\n}"
              },
              "url": {
                "raw": "{{baseUrl}}/api/auth/register",
                "host": ["{{baseUrl}}"],
                "path": ["api", "auth", "register"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "pm.test(\"Response has success message\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.eql(\"User created successfully\");",
                    "});",
                    "pm.test(\"Response contains user data\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.user).to.have.property('id');",
                    "    pm.expect(responseJson.user).to.have.property('email');",
                    "    pm.expect(responseJson.user).to.have.property('name');",
                    "    pm.expect(responseJson.user.email).to.eql(pm.environment.get('testEmail'));",
                    "    pm.expect(responseJson.user.name).to.eql(pm.environment.get('testName'));",
                    "});",
                    "pm.test(\"Response does not contain password\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.user).to.not.have.property('password');",
                    "});",
                    "pm.test(\"Access token cookie is set\", function () {",
                    "    const cookies = pm.response.headers.get('Set-Cookie');",
                    "    pm.expect(cookies).to.include('accessToken');",
                    "});",
                    "// Store user ID for later tests",
                    "if (pm.response.code === 201) {",
                    "    const responseJson = pm.response.json();",
                    "    pm.environment.set('userId', responseJson.user.id);",
                    "}"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Register User - Duplicate Email",
            "request": {
              "method": "POST",
              "header": [
                { "key": "Content-Type", "value": "application/json" }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"name\": \"{{testName}}\"\n}"
              },
              "url": {
                "raw": "{{baseUrl}}/api/auth/register",
                "host": ["{{baseUrl}}"],
                "path": ["api", "auth", "register"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "pm.test(\"Error message indicates user exists\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.eql(\"User already exists\");",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Register User - Missing Fields",
            "request": {
              "method": "POST",
              "header": [
                { "key": "Content-Type", "value": "application/json" }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
              },
              "url": {
                "raw": "{{baseUrl}}/api/auth/register",
                "host": ["{{baseUrl}}"],
                "path": ["api", "auth", "register"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "pm.test(\"Error message indicates missing fields\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.eql(\"All fields are required\");",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Login User",
            "request": {
              "method": "POST",
              "header": [
                { "key": "Content-Type", "value": "application/json" }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
              },
              "url": {
                "raw": "{{baseUrl}}/api/auth/login",
                "host": ["{{baseUrl}}"],
                "path": ["api", "auth", "login"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response has success message\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.eql(\"Login successful\");",
                    "});",
                    "pm.test(\"Response contains user data\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.user).to.have.property('id');",
                    "    pm.expect(responseJson.user).to.have.property('email');",
                    "    pm.expect(responseJson.user).to.have.property('name');",
                    "    pm.expect(responseJson.user.email).to.eql(pm.environment.get('testEmail'));",
                    "});",
                    "pm.test(\"Access token cookie is set\", function () {",
                    "    const cookies = pm.response.headers.get('Set-Cookie');",
                    "    pm.expect(cookies).to.include('accessToken');",
                    "});",
                    "// Store user ID for later tests",
                    "if (pm.response.code === 200) {",
                    "    const responseJson = pm.response.json();",
                    "    pm.environment.set('userId', responseJson.user.id);",
                    "}"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Login User - Invalid Credentials",
            "request": {
              "method": "POST",
              "header": [
                { "key": "Content-Type", "value": "application/json" }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"wrongpassword\"\n}"
              },
              "url": {
                "raw": "{{baseUrl}}/api/auth/login",
                "host": ["{{baseUrl}}"],
                "path": ["api", "auth", "login"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "pm.test(\"Error message indicates invalid credentials\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.eql(\"Invalid credentials, something went wrong with validation\");",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Login User - Missing Fields",
            "request": {
              "method": "POST",
              "header": [
                { "key": "Content-Type", "value": "application/json" }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{testEmail}}\"\n}"
              },
              "url": {
                "raw": "{{baseUrl}}/api/auth/login",
                "host": ["{{baseUrl}}"],
                "path": ["api", "auth", "login"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "pm.test(\"Error message indicates missing fields\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.eql(\"Email and password are required\");",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Get Current User",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/auth/me",
                "host": ["{{baseUrl}}"],
                "path": ["api", "auth", "me"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains user data\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.user).to.have.property('id');",
                    "    pm.expect(responseJson.user).to.have.property('email');",
                    "    pm.expect(responseJson.user).to.have.property('name');",
                    "    pm.expect(responseJson.user.email).to.eql(pm.environment.get('testEmail'));",
                    "});",
                    "pm.test(\"Response does not contain password\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.user).to.not.have.property('password');",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Get Current User - Unauthorized",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/auth/me",
                "host": ["{{baseUrl}}"],
                "path": ["api", "auth", "me"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "exec": [
                    "// Clear cookies to simulate unauthorized request",
                    "pm.cookies.clear();"
                  ],
                  "type": "text/javascript"
                }
              },
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 401\", function () {",
                    "    pm.response.to.have.status(401);",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Logout User",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/auth/logout",
                "host": ["{{baseUrl}}"],
                "path": ["api", "auth", "logout"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response has success message\", function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.message).to.eql(\"Logged out successfully\");",
                    "});",
                    "pm.test(\"Access token cookie is cleared\", function () {",
                    "    const cookies = pm.response.headers.get('Set-Cookie');",
                    "    if (cookies) {",
                    "        pm.expect(cookies).to.include('accessToken=;');",
                    "    }",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          }
        ],
        "description": "Authentication endpoint tests including register, login, logout, and user profile"
      },
      {
        "name": "Performance Tests",
        "item": [
          {
            "name": "Health Check Performance",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/health",
                "host": ["{{baseUrl}}"],
                "path": ["api", "health"]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Response time is acceptable\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          }
        ],
        "description": "Performance tests for health endpoint"
      }
    ],
    "event": [],
    "variable": [
      { "key": "baseUrl", "value": "http://localhost:3001" },
      { "key": "testEmail", "value": "testuser@example.com" },
      { "key": "testPassword", "value": "TestPassword123" },
      { "key": "testName", "value": "Test User" }
    ]
  }